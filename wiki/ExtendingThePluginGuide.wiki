#summary How the plugin was made and how it could be extended

= How to plugin works and how it was made =

This page contains information of how the plugin works. It gives information for people willing to modifying or extending the plugin for their own use. Look for the plugin source code from [http://code.google.com/p/metaedit-plugin-for-eclipse/source/browse/ here].

== Launching the plugin ==

When the plug-in starts it will  search for open API connection. If finds one, it will ask the all the graphs that opened projects have in !MetaEdit+ and show them in the view. If the plug-in doesn’t find API connection it will search for ini-file (named ‘default.mer’) in the root of the used workspace that contains !MetaEdit+ launch parameters. If it finds one, the plug-in asks the user permission to launch !MetaEdit+, log in, open projects and start API server.

Obviously when using the plug-in for first time there is no ini-file in the workspace root nor is there any open API connections to !MetaEdit+. In this case the plug-in tries to calculate the values that are needed for launching !MetaEdit+ and shows the in a dialog to user. When user has checked and edited them if needed, !MetaEdit+ can be launched by clicking the ‘Open !MetaEdit+’ button. The launch parameters are also saved in ‘default.mer’ file in the workspace root folder and are read when the plug-in is next time launched without API connection.

http://metaedit-plugin-for-eclipse.googlecode.com/svn/wiki/plugin_settings_dialog.PNG

Below you can see a state diagram showing the plugin initialization process. 

http://metaedit-plugin-for-eclipse.googlecode.com/svn/wiki/state_diagram_eclipse_plugin.png

== The generation and import process ==

The generation and import process contains stages in which the plugin writes an ini file for !MetaEdit+, generator for the selected graph is run in !MetaEdit+, the (possibly) generated Eclipse project is imported in Eclipse, opened, built and launched in Eclipse automatically. Let's look next the individual states in more detail. You may also test these by running the 'Digital Watch' example available in !MetaEdit+.

In the first stage an ini file for !MetaEdit+ is written. Once user has chosen to run a generator the file is created. The ini file contains information from the application (Eclipse in this case) that calls !MetaEdit+. It also contains the Eclipse workspace path in which the !MetaEdit+ generator is supposed to generate the source code files. Below you can see an example of the ini file content.
{{{
IDE=eclipse
workspace=C:\user\Documents and settings\workspace\
}}}
The file and it's content shows for !MetaEdit+ that it's used from another program. Therefore !MetaEdit+ will run no build command if available but will only generate the source code and project resource files that are needed for importing and building the project in Eclipse. The plugin removes the ini file at the end of the process.

After !MetaEdit+ has generated the source code files, the plugin looks for Java project with same name as the selected generator in the Eclipse workspace. If one is found, it is imported in Eclipse and opened. After that the project is built and run. Finally, as a generation result, user sees the generated code running program in Eclipse.

The project import automates otherwise manual action like choosing a new project from file menu and going through wizard to create a new project. While these actions could be left for the user, the plugin aims to automate integration between code generated from !MetaEdit+ and Eclipse. To provide this automation !MetaEdit+ creates Eclipse project resource files that are needed for opening the project in Eclipse and Eclipse API provides the project import, build and launch commands.

If you want to, you can still generate the source code files from !MetaEdit+, create a project in Eclipse and import the generated source code to that project manually.

So far, these actions only work for Java projects that have the same name that the selected graph in Eclipse plugin. It also needs a working generator in !MetaEdit+.

== Extending the plugin ==

As this plugin may lack of functions that you would need, it's possible to extend it to provide those functions. !MetaEdit+ commands, for example commit and abandon or editing the graphs programmatically, are available via API similarly to the commands that are used in this plugin. For more, see the API section in !MetaEdit+ manual and [http://code.google.com/p/metaedit-plugin-for-eclipse/source/browse/ the source code] of this plugin.