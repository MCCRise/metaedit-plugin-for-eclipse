= Advanced instructions of using the plugin =

This page contains advanced instructions for using the !MetaEdit+ plugin for Eclipse.

== Commands ==

The plugin provides commands that may be used from buttons in the views toolbar or by selecting a graph from the tree and clicking the mouse right button.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/open_graph_in_metaedit_icon.png *Open Graph in !MetaEdit+* opens the same graph in !MetaEdit+ that is selected in the treeview. If no graph is selected, no action is taken. This way user gets to edit the graphs quickly in !MetaEdit+.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/run_generator_icon.png *Run Generator* runs generator in !MetaEdit+ to the selected graph. If no graph is selected, no action is taken. Since graph might have more than one generator the plugin first asks all the generators of the selected graph from !MetaEdit+ and shows them in a list dialog to user from which the user can choose the one he/she wants to run. This command actually begins a wider process that includes importing and running the generated project in Eclipse. See below for furher information.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/update_graph_list_icon.png *Update Graph List* updates the treeview. Before asking the graphs from !MetaEdit+, it tests the API connection and tries to launch !MetaEdit+ as in the plugin startup. This command is useful for both updating the graph list and initializing the whole treeview if the plugin was started without API connection.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/settings_icon.png *Open Settings* opens a dialog that contains the !MetaEdit+ launch parameters. The parameters are saved in 'default.mer' file in the Eclipse workspace root and are read when launching !MetaEdit+ or when initalizing the settings dialog. The dialog provides a tree step verifier for each text field. A green, yellow or red sign will show in front of each textfield showing if the content is correct (green sign), could not be verified (yellow sign) or is not correct.

In the popup menu (mouse right click) there are two commands that are not shown in the view toolbar:

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/create_graph_icon.png *Create a new Graph* will open a !MetaEdit+ dialog for creating a new graph. If no graph is selected, this the only option user gets when he/she opens the popup menu. If graph is selected the dialog will automatically have the same type for the new graph that the selected graph is.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/edit_properties_icon.png *Edit Graph Properties* opens graph properties dialog in !MetaEdit+ and lets user to edit the graph's properties. This depends always on graph so the command is shown only when graph is selected in the treeview.

== The generation and import process ==

The generation and import process contains stages in which the plugin writes an ini file for !MetaEdit+, generator for selected graph is run in !MetaEdit+, the (possibly) generated Eclipse project is imported in Eclipse, opened, built and launched in Eclipse automatically. To understand how this works the stages are explained in the following sections.

The first stage is writing the ini file for !MetaEdit+. When user has confirmed running a generator for a graph the plugin writes a simple ini file for !MetaEdit+. The file contains only information from the application (Eclipse in this case) that calls !MetaEdit+. It also contains the Eclipse workspace path in which the !MetaEdit+ generator is supposed to generate the source code files. The file and it's 'correct' content shows !MetaEdit+ that it should only generate the files, not to run them as by default Autobuild. The plugin also removes the file after it's used during the process.

After !MetaEdit+ has generated the source code files, the plugin looks for the project in the Eclipse workspace that has the same name as the selected graph. If one is found, it is imported in Eclipse and opened. After this the project is built and run. Finally, as a generation result, user gets a running program in Eclipse.

The project import may seem a bit confusing at beginning. Normally user might choose new project from file menu and go through wizard to create a new project. To automate this !MetaEdit+ creates Eclipse project resource files that are needed for opening the project in Eclipse. Eclipse API provides the project import, build and launch commands. As these actions could be left for the user to make them manually, these are ment to provide a better integration example between !MetaEdit+ an Eclipse.

So far, these actions only work for Java projects that have the same name that the selected graph in Eclipse plugin. It also needs a working generator in !MetaEdit+. 