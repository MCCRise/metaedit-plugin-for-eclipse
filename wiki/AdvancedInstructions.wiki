= Advanced instructions for using the plugin =

This page contains advanced instructions for using the !MetaEdit+ plugin for Eclipse.

== Commands ==

The plugin provides commands that may be used from buttons in the views toolbar or by selecting a graph from the tree and clicking the mouse right button.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/open_graph_in_metaedit_icon.png *Open Graph in !MetaEdit+* opens the same graph in !MetaEdit+ that is selected in the tree view. If no graph is selected, no action is taken. This way user gets to edit the graphs quickly in !MetaEdit+.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/run_generator_icon.png *Run Generator* allows to run generator for the selected graph. If no graph is selected, no action is taken. Since a graph may have more than one generator the plugin asks all available generators from !MetaEdit+ and shows them in a list dialog for selection. Depending on the selected generator this commandmay start several automated steps, like produce the code, importing it to Eclipse and running the generated project. See below for further information.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/update_graph_list_icon.png *Update Graph List* updates the treeview. Before asking the graphs from !MetaEdit+, it tests the API connection and tries to launch !MetaEdit+ as in the plugin startup. This command is useful for both updating the graph list and initializing the whole treeview if the plugin was started without API connection.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/settings_icon.png *Open Settings* opens a dialog that contains the !MetaEdit+ launch parameters. The parameters are saved in 'default.mer' file in the Eclipse workspace root and are read when launching !MetaEdit+ or when initalizing the settings dialog. The dialog provides a three step verifier for each text field. green when content is correct, yellow if the entry could not be verified, or red when entry is not correct.

In the popup menu (mouse right click) there are two commands that are not shown in the view toolbar:

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/create_graph_icon.png *Create a new Graph* will open a !MetaEdit+ dialog for creating a new graph. If no graph is selected, a dialog opens to ask which type of graph will be created. If graph is selected the dialog will automatically have the same type as the selected graph.

 http://metaedit-plugin-for-eclipse.googlecode.com/svn/trunk/com.metacase.graphbrowser/icons/edit_properties_icon.png *Edit Graph Properties* opens graph properties dialog in !MetaEdit+ and lets user to edit the graph's properties. This function always depends on selected graph so the command is shown in the popup menu only when there is a selection in the tree view.

== The generation and import process ==

The generation and import process contains stages in which the plugin writes an ini file for !MetaEdit+, generator for the selected graph is run in !MetaEdit+, the (possibly) generated Eclipse project is imported in Eclipse, opened, built and launched in Eclipse automatically. Let's look next the individual states in more detail. You may also test these by running the 'Digital Watch' example available in !MetaEdit+.

In the first stage an ini file for !MetaEdit+ is written. Plugin writes ini file after user has confirmed running a generator. The file contains only information from the application (Eclipse in this case) that calls !MetaEdit+. It also contains the Eclipse workspace path in which the !MetaEdit+ generator is supposed to generate the source code files. The file and it's 'correct' content shows !MetaEdit+ that it should only generate the files, and not run them as standalone autobuild. The plugin also removes the file after it's used during the process.

After !MetaEdit+ has generated the source code files, the plugin looks for the project in the Eclipse workspace that has the same name as the graph for which the generator was executed. If one is found, it is imported in Eclipse and opened. After this the project is built and run. Finally, as a generation result, user sees the generated code running program in Eclipse.

The project import automates otherwise manual action like choosing a new project from file menu and going through wizard to create a new project. While these actions could be left for the user, the plugin aims to automate integration between code generated from !MetaEdit+ and Eclipse. To provide this automation !MetaEdit+ creates Eclipse project resource files that are needed for opening the project in Eclipse and Eclipse API provides the project import, build and launch commands.

So far, these actions only work for Java projects that have the same name that the selected graph in Eclipse plugin. It also needs a working generator in !MetaEdit+. 